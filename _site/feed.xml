<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-01-06T11:10:02-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Kartik’s Notebook</title><subtitle>Offload the brain.
</subtitle><author><name>Kartik Pradeepan</name></author><entry><title type="html">SQL</title><link href="http://localhost:4000/jekyll/2024-01-05-SQL.html" rel="alternate" type="text/html" title="SQL" /><published>2024-01-05T00:00:00-05:00</published><updated>2024-01-05T00:00:00-05:00</updated><id>http://localhost:4000/jekyll/SQL</id><content type="html" xml:base="http://localhost:4000/jekyll/2024-01-05-SQL.html"><![CDATA[<h1 id="1-selecting-and-retrieving-data-with-sql">1 Selecting and Retrieving Data with SQL</h1>

<h2 id="11-what-is-sql">1.1 What is SQL?</h2>
<p>Structured Query Language (SQL): standard computer language for data management and data manipulation. It is the way you can communicate with databases. It is a non-procedural language, meaning you cannot write complete applications with it however you will be able to read, write, and update data.</p>

<p>Just because SQL is the language you are using, there are differences in the syntax depending on the database management system (DBMS) you are using.</p>

<h2 id="12-data-models">1.2 Data Models</h2>
<p>Databases: a container to store organized data; a set of related information.</p>

<p>Tables: a structured list of data or a specific type.</p>
<ul>
  <li>Columns: a single field in a table</li>
  <li>Rows: a record in a table</li>
</ul>

<p>What is data modelling? Organizes and structures information into multiple, related tables. Can represent a business process or show relationships between business processes. <em>Data models should closely represent the real world processes</em></p>

<p>NoSQL (not only SQL): a mechanism for storage and retrieval of unstructured data modelled by means other than tabular relations in relational databases.</p>

<p>All relational models have an entity, attribute, and relationship.</p>
<ul>
  <li>Entity: person, place, thing, or event. Distinguishable, unique and distinct.</li>
  <li>Attribute: characterstic of an entity.</li>
  <li>Relationship: describes association among entities (e.g., one-to-many, many-to-many, one-to-one)</li>
</ul>

<p>ER diagrams depict the relationships between tables. Helps represent business processes. Joined by primary-foreign keys.</p>
<ul>
  <li>Primary keys: a column (or set of columns) whose values uniquely identify every row in a table.</li>
  <li>Foriegn key: one or more columns that can be used together to identify a single row in another table.</li>
  <li>Different types of notation (Chen Notation, Crow’s Foot Notation, UML Class Diagram Notation)</li>
</ul>

<h2 id="13-retrieving-data-with-a-select-statement">1.3 Retrieving data with a SELECT statement</h2>

<p>The select statement you need to specific what you want and where you want it from.</p>

<pre><code class="language-SQL">SELECT item1,
        item2,
        item3
FROM tableName;
</code></pre>
<p>Selects items 1-3 from tableName.</p>

<pre><code class="language-SQL">SELECT *
FROM tableName;
</code></pre>
<p>Selects all items from tableName.</p>

<p>A lot of times you want to limit results (e.g., when the database is large). To select a sample from the database.</p>

<pre><code class="language-SQL">SELECT columnsYouWantToSee
FROM tableName
LIMIT 5;
</code></pre>
<p>Will show you the first 5 columns you want to see from tableName.</p>

<p>*Note: LIMITS have different syntaxes across DBMS.</p>

<h2 id="14-creating-tables">1.4 Creating tables</h2>

<p>Creating tables is useful if you want to extract data from other sources.</p>

<pre><code class="language-SQL">CREATE TABLE tableName (
    Id   char(10)    PRIMARY KEY,
    Variable1   char(10)    NOT NULL,
    Variable2   char(250)   NOT NULL,
    Variable3   decimal(8,2)  NOT NULL,
    Variable4   Varchar(750)    NULL
);
</code></pre>
<h3 id="141-nulls-and-primary-keys">1.4.1 Nulls and primary keys</h3>
<p>Every column is either NULL or NOT NULL. You will receive an error if you omit this with no value. *Note: Do not confuse null values with empty strings**. Primary keys cannot be null.</p>

<p>Primary keys MUST have a value.</p>

<h3 id="142-adding-data-to-the-table">1.4.2 Adding data to the table</h3>
<p>Two ways described below.</p>

<pre><code class="language-SQL">INSERT INTO tableName
VALUES ('000001', 
    'StringValue1', 
    'Stringvalue2', 
    '10.45', 
    NULL
    );
</code></pre>
<p>Using INSERT. This is not a recommended way because you are manually inserting values into columns and if you mess up the order, the entry will be wrong.</p>

<pre><code class="language-SQL">INSERT INTO tableName (
    Id, 
    Variable1, 
    Variable2, 
    Variable3, 
    Variable4
    )
VALUES (
    '000001', 
    'StringValue1', 
    'Stringvalue2', 
    '10.45', 
    NULL
    );
</code></pre>
<p>Now you are guaranteeing that the values are going into the right column.</p>

<h3 id="143-creating-temporary-tables">1.4.3 Creating temporary tables</h3>
<p>Temporary tables will be deleted when the current session is terminated. Faster than creating a real table. Useful for complex queries using subsets and joints.</p>

<pre><code class="language-SQL">CREATE TEMPORARY TABLE tmpTableName AS (
    SELECT *
    FROM tableName
    WHERE variableName1 = "conditionalString"
);
</code></pre>
<p>Depending on the DBMS, you will not be able to write data to temporary tables.</p>

<h3 id="144-adding-comments-to-sql">1.4.4 Adding comments to SQL</h3>
<p>Mutes the expression of code. Also helps you remember what and why you were doing.</p>

<p>Two ways to add comments</p>

<p>Single line comments</p>
<pre><code class="language-SQL">SELECT variableName1,
--variableName2,
variableName3
from tableName
</code></pre>
<p>The above comments out variableName2.</p>

<p>Section comments</p>
<pre><code class="language-SQL">SELECT variableName1,
/* variableName2,
variableName3 */
from tableName
</code></pre>
<p>The above comments out variableName2, and variableName3.</p>

<h2 id="15-star-schema-vs-snowflake-schema">1.5 Star Schema vs Snowflake Schema</h2>

<p>These are two types of datawarehouse models. They are ways to organize data using relational databases.</p>

<p>Star schema: Aggregated central fact table that contains relationships to dimension tables.</p>

<p>Snowflake schema: Stores the same data as the star schema however the main difference is that the dimensional tables in the snowflake schema are normalized producing <em>snowflaking</em>.</p>

<h3 id="151-first-difference-normalization">1.5.1 First difference: Normalization</h3>

<p>Snowflake schemas will use less space to store dimension tables because normalized databases produce far fewer redundant records. As a result of this, denormalized data models increase the chance of data integrity issues where records across dimension tables start to vary.</p>

<h3 id="152-second-difference-query-complexity">1.5.2 Second difference: Query complexity</h3>

<p>Snowflake schemas, because the dimension tables are normalized, require more complex querying. In star schema, you will only join the fact table with dimension tables you need - you will only have one JOIN per dimension table. In snowflake schema querying, you will need to use multiple joins to find the right dimension. Because of this, querying takes slightly longer in snowflake schema however the absolute difference is meaningless (e.g., 1ms vs 1s).</p>

<p><a href="https://www.vertabelo.com/blog/data-warehouse-modeling-star-schema-vs-snowflake-schema/">Source for snowflake vs star schema</a></p>

<h1 id="2-filtering-sorting-and-calculating-data-with-sql">2 Filtering, Sorting, and Calculating Data with SQL</h1>

<h2 id="21-basics-of-filtering-with-sql">2.1 Basics of Filtering with SQL</h2>

<p>Allows you to narrow the data you want to retrieve, reduce the number of records you retrieve, increase query performance, reduce the strain on the client application, and governance limitations.</p>

<h3 id="211-where-clause-operator">2.1.1 WHERE clause operator</h3>
<pre><code class="language-SQL">SELECT *
FROM tableName
WHERE columnName operator value;
</code></pre>

<p>List of operators:</p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">=</code> equal</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;&gt;</code> not equal (in some operators it may be written as !=)</li>
  <li><code class="language-plaintext highlighter-rouge">&gt;</code> greater than</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;</code> less than</li>
  <li><code class="language-plaintext highlighter-rouge">&gt;=</code> greater than or equal</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;=</code> less than or equal to</li>
  <li><code class="language-plaintext highlighter-rouge">BETWEEN</code> between aan inclusive range
    <ul>
      <li>You need to specific the range (e.g., WHERE columnName BETWEEN value1 AND value2;)</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">IS NULL</code> is a null value</li>
</ol>

<h2 id="22-advanced-filtering-in-or-not">2.2 Advanced Filtering: IN, OR, NOT</h2>]]></content><author><name>Kartik</name></author><category term="Jekyll" /><summary type="html"><![CDATA[1 Selecting and Retrieving Data with SQL]]></summary></entry></feed>